Cses Sheet
-x-x-x-x-x-x--x-x-x-x-x-x--x-x-x-x-x-x-x--x-x-x-x-x-x--x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-
1-Weird Algorithm
public static void main(String[] args) {
		FastReader in= new FastReader();
		long t= in.nextInt();
		System.out.println(t+" ");
		long x;
		while(t!=1) {
			if(t%2==0) {
				 x =even(t);
				System.out.println(x);
				
			}
			else {
				 x=odd(t);
				System.out.println(x);
			
			}
			t=x;
		}
		
	}
	public static long even(long x) {
		return x/2;
	}
	public static long odd (long x) {
		return (x*3)+1;
	}
	
  
  
  
  -x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x--x-x-x-x-x-x-x-x-x-x-x-x
  2---> Missing Number
  try taking long to submit it
  
  public static void main(String[] args) {
		FastReader in= new FastReader();
		int n = in.nextInt();
		int a[] = new int [n-1];
		long sum=0;
		for(int i =0;i<n-1;i++) {
			a[i]=in.nextInt();
			sum+=a[i];		
		}
		long y = n*(n+1)/2;
		System.out.println(y-sum);
	}
  
  
  
  -x-x-x-x-x-x--x-x-x-x-x-x--x-x-x-x-x--x-x-x-x-x-x--x-x-x-x--x-x-x-x-x-x--x-x-x-x-x--x-x-x-x-x-x-x-x-x--x-x
  
  3--> Repititions
  
  
  public static void main(String[] args) {
		FastReader in= new FastReader();
		String s = in.nextLine();
		int max=1;
		int curr=1;
		for(int i=0;i<s.length()-1;i++) {
			if(s.charAt(i)==s.charAt(i+1)) curr++;
			if(s.charAt(i)!=s.charAt(i+1)) curr=1;
			max=Math.max(curr, max);
		}
//		if(s.charAt(s.length()-2)==s.charAt(s.length()-1)) max++;
		System.out.println(max==0? 1: max);
	}
	
  
  
  
  
  -x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x
  
  4---> Increasing Array
  
  public static void main(String[] args) {
		FastReader in = new FastReader();
		
			int n = in.nextInt();
			int a[]= in.readintarray(n);
			long sum=0;
			for(int i =1;i<n;i++) {
				if(a[i]<a[i-1]) {
					sum+=a[i-1]-a[i];
					a[i]=a[i-1];
				}
			}
//			for(int i =0;i<n;i++) System.out.println(a[i]);
			System.out.println(sum);
		
 
	}
	
	
  
  
-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x
5--> Permutations(wont submit coz java is slow)


public static void main(String[] args) {
		FastReader in = new FastReader();
		
			int n = in.nextInt();
//			int a[]= new int[n];
			if(n==1) System.out.println(1);;
			if(n==2||n==3) System.out.println("NO SOLUTION");
			if(n==4) System.out.println("2 4 1 3");
			else {
				if(n%2==0) {
					for(int i =2;i<=n;i+=2)
						System.out.print(i+" ");
					for(int i =1;i<n;i+=2)
						System.out.print(i+" ");
				
				
				}
				else {
					for(int i =2;i<n;i+=2)System.out.print(i+" ");
					for(int i=1;i<=n;i+=2) System.out.print(i+" ");
					
				}
			}
				
 
	}
	
-x-x-x-x-x-x-x--x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x--x-x-x-x-x-x-x-x--x-x-x-x-x-x-x-x-x-x-x

6---> Number spiral

Try thinking about it its pretty hard think directly


public static void main(String[] args) {
		FastReader in = new FastReader();
		
//			int n = in.nextInt();
			int t = in.nextInt();
			while(t-->0) {
				int x = in.nextInt();
				int y = in.nextInt();
				long z = Math.max(x, y);
				long z2 = (z-1)*(z-1),ans=0;
				if(z%2==0) {
					if(y==z) {
						ans=z2+x;
					}
					else {
						ans = z2+2*z-y;
					}
				}
				else {
					if(x==z) {
						ans=z2+y;
					}
					else {
						ans = z2+2*z-x;
					}
	
				}
				System.out.println(ans);
				
			}
 
	}
	
	
x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x

7---> Two Knights Not sure why is this wrong though



public static void main(String[] args) {
		FastReader in = new FastReader();
		
//			int n = in.nextInt();
			long t = in.nextLong();
			for(int i =1;i<=t;i++) {
				if(i==2) System.out.println(6);
				if(i==1) System.out.println(0);
				if(i>2) {
					long ans = i*i*(i*i-1)/2;
					long finala =ans-4*(i-1)*(i-2);
					System.out.println(finala);
				}
				
				
			}
 
	}
	
	
x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x	
8---> Distinct Numbers



	public static void main(String[] args) {
		FastReader in= new FastReader();
		int n = in.nextInt();
		int a[] = new int[n];
		HashSet<Integer> h = new HashSet<>();
		for(int i =0;i<n;i++) {
			a[i]=in.nextInt();
			h.add(a[i]);
		}
		System.out.println(h.size());
	}
	
	
	
	
x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x--x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x
9--> Apartments



public static void main(String[] args) {
		FastReader in= new FastReader();
		int n = in.nextInt();
		int m = in.nextInt();
		long k = in.nextLong();
		int a[] = in.readintarray(n);
		int b[] = in.readintarray(m);
		Arrays.sort(a);
		Arrays.sort(b);
		int j=0;
		long cont=0;
		//45 60 60 80
		//30 60 75
		for(int i =0;i<n;i++) {
			while(j<m&&b[j]<a[i]-k) 
				j++;
			
			if(b[j]<=a[i]+k&&j<m) {
				cont++;
				++j;
			}
		}
		System.out.println(cont);
		
	}


-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x
10---> Ferris Wheel


public static void main(String[] args) {
		FastReader in= new FastReader();
		int n = in.nextInt();
		int x = in.nextInt();
		
		int a[] = in.readintarray(n);
		Arrays.sort(a);
		int count=0;
		for(int i=0,j=n-1;i<j;) {
			while(a[i]+a[j]>x&&i<j) {
				j--;
//				System.out.println(1);
			}
//			System.out.println(i+" "+j);
			if(i>=j) { 
//				System.out.println(1);
				break;
			}
			count++;
			i++;
			j--;
				
			
		}
		System.out.println(n-count);
		
		
	}
	
	
	
x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x--x-x-x-x
11--> Restaurant Customers



public static void main(String[] args) {
		FastReader in= new FastReader();
		int n =in.nextInt();
		int a[]= new int[n];
		int b[] = new int[n];
		int i=0;
		for(;i<n;i++) {
			a[i]=in.nextInt();
			b[i]=in.nextInt();
			
		}
		Arrays.sort(a);
		Arrays.sort(b);
		int cnt=0 ,x=0,y=0;
		int max=0;
		while(x<n&&y<n) {
			if(a[x]<b[y])  {
				cnt++;
				x++;
			}
			else {
				cnt--;
				y++;
			}
			max= Math.max(cnt, max);
		}
		System.out.println(max);
		
	
		
	}
	
	
	
x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-xx-x-xx-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x--xx-
12---> Movie Festival


public static void main(String[] args) {
		FastReader in= new FastReader();
		int n =in.nextInt();
		int a[]= new int[n];
		int b[] = new int[n];
		int i=0;
		for(;i<n;i++) {
			a[i]=in.nextInt();
			b[i]=in.nextInt();
			
		}
		Arrays.sort(a);
		Arrays.sort(b);
		int cnt=1 ,x=0,y=0;
	
		for(x=0;x<n;x++) {
			
			if(a[x]>=b[y]) {
//				System.out.println(a[x]+" "+b[y]);
				cnt++;
				y++;
			
			}
		
		}
		System.out.println(cnt);
	
		
		
	}
	
	
x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-xx-x-x-x-x-x-
13---> Sum of Value




	public static void main(String[] args) {
		FastReader in= new FastReader();
		int n =in.nextInt();
		int s = in.nextInt();
		int a[]= in.readintarray(n);
		int b[] = a.clone();
		Arrays.sort(a);
		long curr = 0;
		int first= 0,i=0,j=n-1;
		int second=0;
		while(i<j) {
			curr=a[i]+a[j];
			if(curr==s) {
				first=a[i];
				second=a[j];
				break;
			}
			if(curr<s)i++;
			if(curr>s)j--;
			
		}
//		System.out.println(first+" "+second);
		if(first==0&&second==0) System.out.println("IMPOSSIBLE");
		
		else {
			int fi=0,si=0;
			int y=n-1;
//			System.out.println(first+" "+second);
			for(int x =0;x<n&&y>=0;x++) {
				if(b[x]==first) fi=x+1;
				if(b[y]==second) si=y+1;
				y--;
			}
			System.out.println(fi+" "+si);
		}
			
		
		
		
	}
x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-xx-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x
14---> Maximum Subarray Sum



FastReader in= new FastReader();
		int n =in.nextInt();
		int a[]= in.readintarray(n);
		long curr=0,max=Integer.MIN_VALUE;
		for(int i =0;i<n;i++) {
			curr+=a[i];
			if(curr<0) {
				max=Math.max(curr, max);
				curr=0;
				
			}
			else {
				max=Math.max(max, curr);
			}
		}
		System.out.println(max);
		
		
		
		
x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x--x-x-x-x-x--x-x-x-x-x-x--x-x-x-x-x-x-x-x-x-x-x-x-x-x--x-x-x-x-x-x-x-x
15--> Stick Length



public static void main(String[] args) {
		FastReader in= new FastReader();
		int n =in.nextInt();
		int a[]= in.readintarray(n);
		Arrays.sort(a);
		int x=a[n/2];
		long sum=0;
		for(int i =0;i<n;i++) {
			sum+=Math.abs(x-a[i]);
		}
		System.out.println(sum);
		
		
	}
	
	
x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x--x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-
16--> Missing Coin Sum



public static void main(String[] args) {
		FastReader in= new FastReader();
		int n =in.nextInt();
		int a[]= in.readintarray(n);
		Arrays.sort(a);
		System.out.println(sumFind(n,a));
		
		
		
		
	}
	public static	long sumFind(int n , int a[]) {
		long res=1;
		for(int i =0;i<n;i++) {
			if(a[i]>res) return res;
			else {
				res+=a[i];
			}
		}
		return res;
		
	}
	
x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x
17--> COllecting Numbers



public static void main(String[] args) {
		FastReader in= new FastReader();
		int n =in.nextInt();
		int a[]= in.readintarray(n);
		Pair[] list = new Pair[n];
		for(int i =0;i<n;i++) list[i]=new Pair(a[i],i);
		int count=0;
		Arrays.sort(list,new Comparator<Pair>(){
			@Override public int compare(Pair p1,Pair p2) {
				return p1.first-p2.first;
			}
		});
		int cnt=1;
		for(int i=1;i<n;i++) {
			if(list[i-1].second>list[i].second) cnt++;
		}
		System.out.println(cnt);
		
	}
	
x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x--x-x-x-x-x-x-x--x-x-x-x-x-x--x-x-x-x--x-x-x-x-x-x-x--x-x-x-x-x-x-x-x-x
